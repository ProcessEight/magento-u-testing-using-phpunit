Index: tests/unit/boostrap.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/unit/boostrap.php	(revision 83421016814cf397c1e87d4c52fafe8c08619fb5)
+++ tests/unit/boostrap.php	(revision )
@@ -1,0 +1,0 @@
Index: tests/integration/Training/Example/Helper/DataTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/Training/Example/Helper/DataTest.php	(revision 83421016814cf397c1e87d4c52fafe8c08619fb5)
+++ tests/integration/Training/Example/Helper/DataTest.php	(revision )
@@ -1,6 +1,6 @@
 <?php
 
-class Training_Example_DataTest extends PHPUnit_Framework_TestCase
+class Training_Example_DataTest extends Training_Example_TestCase
 {
 	protected $_class = 'Training_Example_Helper_Data';
 
@@ -9,39 +9,8 @@
 	 */
 	public function setUp()
 	{
-		$modules = array( 'core', 'customer', 'checkout', 'catalog', 'reports' );
-		foreach ( $modules as $module ) {
-			$class       = "$module/session";
-			$phpClass    = Mage::getConfig()->getModelClassName( $class );
-			$sessionMock = $this->getMockBuilder( $phpClass )
-			                    ->disableOriginalConstructor()
-			                    ->getMock();
-
-			// Stub out key methods
-			$sessionMock->expects( $this->any() )
-			            ->method( 'start' )
-			            ->will( $this->returnSelf() );
-			$sessionMock->expects( $this->any() )
-			            ->method( 'init' )
-			            ->will( $this->returnSelf() );
-			$sessionMock->expects( $this->any() )
-			            ->method( 'getMessages' )
-			            ->will( $this->returnValue(
-				            Mage::getModel( 'core/message_collection' )
-			            ) );
-			$sessionMock->expects( $this->any() )
-			            ->method( 'getSessionIdQueryParam' )
-			            ->will( $this->returnValue(
-				            Mage_Core_Model_Session_Abstract::SESSION_ID_QUERY_PARAM
-			            ) );
-			$sessionMock->expects( $this->any() )
-			            ->method( 'getCookieShouldBeReceived' )
-			            ->will( $this->returnValue( false ) );
-
-			// Inject our mocked session into the registry
-			Mage::unregister( "_singleton/$class" );
-			Mage::register( "_singleton/$class", $sessionMock );
-		}
+		Training_Example_TestCase::resetMagento();
+		$this->prepareFrontendDispatch();
 	}
 
 	/**
\ No newline at end of file
Index: tests/unit/phpunit-unit.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/unit/phpunit-unit.xml	(revision 83421016814cf397c1e87d4c52fafe8c08619fb5)
+++ tests/unit/phpunit-unit.xml	(revision )
@@ -1,30 +1,16 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://schema.phpunit.de/4.1/phpunit.xsd"
-         bootstrap="tests/unit/bootstrap.php"
+         bootstrap="bootstrap.php"
          backupGlobals="false"
-         verbose="true">
+         verbose="true"
+         colors="true"
+>
     <testsuites>
         <testsuite name="Unit Tests">
             <directory suffix="Test.php">tests/unit</directory>
         </testsuite>
     </testsuites>
-
-    <!--<logging>-->
-    <!--<log type="coverage-html" target="build/coverage" title="PHPUnit" highlight="true"/>-->
-    <!--<log type="coverage-clover" target="build/logs/clover.xml"/>-->
-    <!--<log type="coverage-xml" target="build/logs/coverage"/>-->
-    <!--<log type="junit" target="build/logs/junit.xml" logIncompleteSkipped="false"/>-->
-    <!--</logging>-->
-
-    <!--<filter>
-      <whitelist processUncoveredFilesFromWhitelist="true">
-        <directory suffix=".php">src</directory>
-        <exclude>
-         <file>src/Framework/Assert/Functions.php</file>
-        </exclude>
-      </whitelist>
-    </filter>-->
 
     <php>
         <const name="PHPUNIT_TESTSUITE" value="true"/>
Index: tests/Training/Example/TestCase.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/Training/Example/TestCase.php	(revision )
+++ tests/Training/Example/TestCase.php	(revision )
@@ -0,0 +1,81 @@
+<?php
+
+abstract class Training_Example_TestCase extends PHPUnit_Framework_TestCase
+{
+	/**
+	 * Reset Magento and re-initialise our custom error handler
+	 */
+	public static function resetMagento()
+	{
+		Mage::reset();
+		Mage::setIsDeveloperMode( true );
+		Mage::app('admin', 'store', array(
+			'config_model' => 'Training_Example_Config'
+		))->setResponse(new Training_Example_Controller_Response_Http);
+
+		// Fix error handler
+		$handler = set_error_handler( function () {
+		} );
+		set_error_handler( function ( $errno, $errstr, $errfile, $errline ) use ( $handler ) {
+			if ( E_WARNING === $errno
+			     && 0 === strpos( $errstr, 'include(' )
+			     && substr( $errfile, - 19 ) == 'Varien/Autoload.php'
+			) {
+				return null;
+			}
+			call_user_func( $handler, $errno, $errstr, $errfile, $errline );
+		} );
+	}
+
+	public function prepareFrontendDispatch()
+	{
+		$store = Mage::app()->getDefaultStoreView();
+		Mage::app()->setCurrentStore( $store->getCode() );
+		$store->setConfig( 'web/url/use_store', 0 );
+		$store->setConfig( 'web/url/redirect_to_base', 0 );
+
+		$modules = array( 'core', 'customer', 'checkout', 'catalog', 'reports' );
+		foreach ( $modules as $module ) {
+			$class = "$module/session";
+
+			$sessionMock = $this->getMockBuilder(Mage::getConfig()->getModelClassName( $class ))
+                ->disableOriginalConstructor()
+				->getMock();
+
+			$sessionMock->expects( $this->any() )
+				->method( 'start' )
+	            ->will( $this->returnSelf() );
+			$sessionMock->expects( $this->any() )
+				->method( 'init' )
+	            ->will( $this->returnSelf() );
+			$sessionMock->expects( $this->any() )
+	            ->method( 'getMessages' )
+				->will( $this->returnValue(
+					Mage::getModel( 'core/message_collection' )
+				) );
+			$sessionMock->expects( $this->any() )
+	            ->method( 'getSessionIdQueryParam' )
+				->will( $this->returnValue(
+					Mage_Core_Model_Session_Abstract::SESSION_ID_QUERY_PARAM
+				) );
+			$sessionMock->expects( $this->any() )
+			            ->method( 'getCookieShouldBeReceived' )
+			            ->will( $this->returnValue( false ) );
+
+			Mage::unregister( "_singleton/$class" );
+			Mage::register( "_singleton/$class", $sessionMock );
+			Mage::app()->getConfig()->setModelMock( $class, $sessionMock );
+		}
+
+		$cookieMock = $this->getMock( 'Mage_Core_Model_Cookie' );
+		$cookieMock->expects( $this->any() )
+		           ->method( 'get' )
+		           ->will( $this->returnValue( serialize( 'dummy' ) ) );
+		Mage::unregister( '_singleton/core/cookie' );
+		Mage::register( '_singleton/core/cookie', $cookieMock );
+
+		// Mock visitor log observer
+		$logVisitorMock = $this->getMock( 'Mage_Log_Model_Visitor' );
+		Mage::app()->getConfig()->setModelMock( 'log/visitor', $logVisitorMock );
+	}
+}
\ No newline at end of file
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .gitignore	(revision 83421016814cf397c1e87d4c52fafe8c08619fb5)
+++ .gitignore	(revision )
@@ -1,4 +1,3 @@
-.idea
 logs
 vendor
 www
Index: tests/integration/Training/Example/IntegrationTestCase.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/Training/Example/IntegrationTestCase.php	(revision 83421016814cf397c1e87d4c52fafe8c08619fb5)
+++ tests/integration/Training/Example/IntegrationTestCase.php	(revision )
@@ -10,7 +10,7 @@
 		Mage::reset();
 		Mage::setIsDeveloperMode( true );
 		Mage::app( 'admin', 'store', array(
-			'config_model' => 'Example_TestFramework_Config'
+			'config_model' => 'Training_Example_Config'
 		) );
 
 		// Fix error handler
\ No newline at end of file
Index: tests/Training/Example/Controller/Response/Http.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/Training/Example/Controller/Response/Http.php	(revision )
+++ tests/Training/Example/Controller/Response/Http.php	(revision )
@@ -0,0 +1,35 @@
+<?php
+
+class Training_Example_Controller_Response_Http extends Mage_Core_Controller_Response_Http
+{
+	/**
+	 * @var bool
+	 */
+	protected $_headersSentFlag = false;
+
+	/**
+	 * @param bool $throw
+	 *
+	 * @return bool
+	 */
+	public function canSendHeaders( $throw = false )
+	{
+		if ( $this->_headersSentFlag ) {
+			// Will trigger headers sent exception in testing context
+			return parent::canSendHeaders($throw);
+		}
+
+		return true;
+	}
+
+	/**
+	 * @return string $result
+	 */
+	public function sendResponse()
+	{
+		ob_start();
+		$result = parent::sendResponse();
+		ob_end_clean();
+		return $result;
+	}
+}
\ No newline at end of file
Index: tests/integration/bootstrap.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/bootstrap.php	(revision 83421016814cf397c1e87d4c52fafe8c08619fb5)
+++ tests/integration/bootstrap.php	(revision )
@@ -2,16 +2,13 @@
 
 require_once __DIR__ . '/../../www/app/Mage.php';
 
-//require_once __DIR__ . '/Training/Example/IntegrationTestCase.php';
-//Training_Example_IntegrationTestCase::resetMagento();
+require_once __DIR__ . '/../Training/Example/TestCase.php';
+require_once __DIR__ . '/../Training/Example/Config.php';
+require_once __DIR__ . '/../Training/Example/Controller/Response/Http.php';
+
 Mage::setIsDeveloperMode(true);
-Mage::app();
-$handler = set_error_handler(function () {});
-set_error_handler(function ($errno, $errstr, $errfile, $errline) use ($handler) {
-	if(E_WARNING === $errno
-	   && 0 === strpos($errstr, 'include(')
-	   && substr($errfile, -19) == 'Varien/Autoload.php') {
-		return null;
-	}
-	return call_user_func($handler, $errno, $errstr, $errfile, $errline);
-});
\ No newline at end of file
+Mage::app('admin', 'store', array(
+	'config_model' => 'Training_Example_Config'
+))->setResponse(new Training_Example_Controller_Response_Http);
+
+Training_Example_TestCase::resetMagento();
Index: tests/integration/Training/Example/Dispatch/HomeTest.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/Training/Example/Dispatch/HomeTest.php	(revision )
+++ tests/integration/Training/Example/Dispatch/HomeTest.php	(revision )
@@ -0,0 +1,30 @@
+<?php
+
+class Training_Example_Dispatch_HomeTest extends Training_Example_TestCase
+{
+	public function setUp()
+	{
+		Training_Example_TestCase::resetMagento();
+		$this->prepareFrontendDispatch();
+	}
+
+	public function testControllerActionCmsHomepage()
+	{
+		// Config fixtures
+		Mage::app()->getStore()
+		    ->setConfig( 'web/default/front', 'cms' )
+		    ->setConfig( 'web/default/cms_home_page', 'home' ); // Current request
+
+		Mage::app()->getRequest()->setPathInfo( '/' );
+
+		Mage::app()->getFrontController()->dispatch();
+
+		$response = Mage::app()->getResponse();
+
+		$this->assertEquals( 200, $response->getHttpResponseCode(),
+			"HTTP code not 200" );
+
+		$found = strpos($response->getBody(), 'New Products' );
+		$this->assertTrue( false !== $found, 'String not found in response body' );
+	}
+}
\ No newline at end of file
Index: tests/integration/phpunit-integration.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/integration/phpunit-integration.xml	(revision 83421016814cf397c1e87d4c52fafe8c08619fb5)
+++ tests/integration/phpunit-integration.xml	(revision )
@@ -1,46 +1,36 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:noNamespaceSchemaLocation="http://schema.phpunit.de/4.1/phpunit.xsd"
-         bootstrap="tests/integration/bootstrap.php"
+         bootstrap="bootstrap.php"
          backupGlobals="false"
-         verbose="true">
+         verbose="true"
+         colors="true"
+>
-  <testsuites>
+    <testsuites>
-    <!--<testsuite name="small">
-      <directory suffix="Test.php">tests/Framework</directory>
-      <directory suffix="Test.php">tests/Extensions</directory>
-      <directory suffix="Test.php">tests/Runner</directory>
-      <directory suffix="Test.php">tests/Util</directory>
-    </testsuite>
-
-    <testsuite name="large">
-      <directory suffix=".phpt">tests/TextUI</directory>
-      <directory suffix=".phpt">tests/Regression</directory>
-    </testsuite>-->
-
-    <testsuite name="Integration Tests">
-      <directory suffix="Test.php">tests/integration</directory>
-    </testsuite>
-  </testsuites>
+        <testsuite name="Integration Tests">
+            <directory suffix="Test.php">tests/integration</directory>
+        </testsuite>
+    </testsuites>
 
-  <!--<logging>-->
+    <!--<logging>-->
     <!--<log type="coverage-html" target="build/coverage" title="PHPUnit" highlight="true"/>-->
     <!--<log type="coverage-clover" target="build/logs/clover.xml"/>-->
-      <!--<log type="coverage-xml" target="build/logs/coverage"/>-->
+    <!--<log type="coverage-xml" target="build/logs/coverage"/>-->
     <!--<log type="junit" target="build/logs/junit.xml" logIncompleteSkipped="false"/>-->
-  <!--</logging>-->
+    <!--</logging>-->
 
-  <!--<filter>
-    <whitelist processUncoveredFilesFromWhitelist="true">
-      <directory suffix=".php">src</directory>
-      <exclude>
-       <file>src/Framework/Assert/Functions.php</file>
-      </exclude>
-    </whitelist>
-  </filter>-->
+    <!--<filter>
+      <whitelist processUncoveredFilesFromWhitelist="true">
+        <directory suffix=".php">src</directory>
+        <exclude>
+         <file>src/Framework/Assert/Functions.php</file>
+        </exclude>
+      </whitelist>
+    </filter>-->
 
-  <php>
-    <const name="PHPUNIT_TESTSUITE" value="true"/>
+    <php>
+        <const name="PHPUNIT_TESTSUITE" value="true"/>
-    <env name="app_frontend_url" value="http://magento1-testing-using-phpunit.local/index.php/" />
+        <env name="app_frontend_url" value="http://magento1-testing-using-phpunit.local/index.php/"/>
-    <env name="app_backend_url" value="http://magento1-testing-using-phpunit.local/index.php/admin/" />
+        <env name="app_backend_url" value="http://magento1-testing-using-phpunit.local/index.php/admin/"/>
-  </php>
+    </php>
 </phpunit>
Index: tests/Training/Example/Config.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- tests/Training/Example/Config.php	(revision )
+++ tests/Training/Example/Config.php	(revision )
@@ -0,0 +1,25 @@
+<?php
+
+class Training_Example_Config extends Mage_Core_Model_Config
+{
+	protected $_mocks = array(
+		'model' => array()
+	);
+
+	public function setModelMock($modelClass, $mock)
+	{
+		$modelClass = (string)$modelClass;
+		$this->_mocks['model'][$modelClass] = $mock;
+	}
+
+	public function getModelInstance( $modelClass = '', $constructArguments = array() )
+	{
+		$modelClass = (string)$modelClass;
+
+		if(isset($this->_mocks['model'][$modelClass])) {
+			return $this->_mocks['model'][$modelClass];
+		}
+
+		return parent::getModelInstance( $modelClass, $constructArguments );
+	}
+}
\ No newline at end of file
